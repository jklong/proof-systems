name: Basic rust CI stuff

on:
  push:
    branches:
      - main
  pull_request:

env:
  # https://doc.rust-lang.org/cargo/reference/profiles.html#release
  RUSTFLAGS: -Coverflow-checks=y -Cdebug-assertions=y
  # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
  CARGO_INCREMENTAL: 1

jobs:
  run_checks:
    runs-on: ubuntu-latest
    name: Run some basic checks and tests
    steps:
      - name: Checkout PR
        uses: actions/checkout@v2

      - name: Set up cargo/rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Setup OCaml (because of ocaml-gen)
        run: |
          sudo apt update
          sudo apt install -y ocaml

      # `cargo check` compiles the packages without performing the final step of code generation,
      # which is faster than running `cargo build`.
      # Use release build to speed up tests
      - name: Run cargo check
        run: cargo check --release

      - name: Run cargo check with all features (including ocaml_types)
        run: cargo check --release --all-features

      - name: Run tests
        run: cargo test --release --all-features

      - name: Enforce formating
        run: cargo fmt -- --check

      # TODO: Need clippy for `--features ocaml_types`?
      - name: Enforce clean clippy output
        run: cargo clippy -- -D warnings

      - name: Check that up-to-date specification is checked in
        run: |
          cargo install cargo-spec --version 0.1.3
          cd book/specifications
          cd kimchi && make build && cd ..
          cd poly-commitment && make build && cd ..
          git diff --exit-code

  static_analysis:
    runs-on: ubuntu-latest
    name: Run static analysis tools
    steps:
      - name: Checkout PR
        uses: actions/checkout@v2

      - name: Set up cargo/rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: miri, rust-src
          override: true

      - name: Setup OCaml (because of ocaml-gen)
        run: |
          sudo apt update
          sudo apt install -y ocaml
      
      - name: Setup miri
        run: cargo miri setup
      
      - name: Run tests with miri
        run: cargo clean && cargo miri test --release --all-features
      
